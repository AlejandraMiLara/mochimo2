generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  password          String
  name              String
  lastName          String
  profilePictureUrl String?
  billingDetails    Json?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  clients           Client[]
  notifications     Notification[]
  projects          Project[]
}

model Client {
  id          String    @id @default(uuid())
  name        String
  contactName String?
  email       String?
  phone       String?
  address     Json?
  taxId       String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices    Invoice[]
  projects    Project[]
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  status      ProjectStatus @default(proposal)
  startDate   DateTime?
  deadline    DateTime?
  totalBudget Decimal?
  clientId    String
  userId      String
  contracts   Contract[]
  invoices    Invoice[]
  client      Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(todo)
  priority    TaskPriority @default(medium)
  dueDate     DateTime?
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Contract {
  id         String         @id @default(uuid())
  title      String
  terms      String
  status     ContractStatus @default(draft)
  fileUrl    String?
  signedDate DateTime?
  projectId  String
  project    Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Invoice {
  id            String        @id @default(uuid())
  invoiceNumber String        @unique
  issueDate     DateTime
  dueDate       DateTime
  status        InvoiceStatus @default(draft)
  subtotal      Decimal
  taxAmount     Decimal       @default(0)
  total         Decimal
  notes         String?
  projectId     String
  clientId      String
  client        Client        @relation(fields: [clientId], references: [id])
  project       Project       @relation(fields: [projectId], references: [id])
  items         InvoiceItem[]
  payments      Payment[]
}

model InvoiceItem {
  id          String  @id @default(uuid())
  description String
  quantity    Decimal
  unitPrice   Decimal
  total       Decimal
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Payment {
  id          String        @id @default(uuid())
  amount      Decimal
  paymentDate DateTime
  method      PaymentMethod
  notes       String?
  invoiceId   String
  invoice     Invoice       @relation(fields: [invoiceId], references: [id])
}

model Notification {
  id              String           @id @default(uuid())
  message         String
  type            NotificationType
  isRead          Boolean          @default(false)
  relatedEntityId String?
  userId          String
  createdAt       DateTime         @default(now())
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ProjectStatus {
  proposal
  active
  paused
  completed
  cancelled
}

enum TaskStatus {
  todo
  in_progress
  done
}

enum TaskPriority {
  low
  medium
  high
}

enum ContractStatus {
  draft
  sent
  signed
  expired
}

enum InvoiceStatus {
  draft
  sent
  paid
  overdue
  cancelled
}

enum PaymentMethod {
  bank_transfer
  paypal
  stripe
  cash
  other
}

enum NotificationType {
  task_due
  invoice_overdue
  payment_received
  contract_signed
  general
}
